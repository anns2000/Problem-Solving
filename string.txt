#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 5;

int vis[N];
int m, n, col[N];

bool good = true;

vector<int> g[N];
vector <int> path;
void dfs(int node)
{
    vis[node] = 1;//means that node is visited and perant
    for(int neg : g[node])
    {
        if(vis[neg] == 0)
            dfs(neg);
        else if(vis[neg] == 1)
            good = false;
    }
    vis[node]=2;//means that node only  visited
    path.push_back(node);

}
void init()
{
    for (int i = 1; i <= n; i++)
    {
        g[i].clear();
    }
    good = true;
    memset(vis, 0, sizeof(vis));
    path.clear();
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    for (;;)
    {
        init();
        cin >> n >> m;
        if(n==0)
        {
            break;
        }
        for (int i = 0; i < m; i++)
        {
            int u, v;
            cin >> u >> v;
            g[u].push_back(v);

        }

        for (int i = 1; i <= n; i++)
        {
            if (vis[i] == 0)
                dfs(i);
        }
        if(good)
        {
            reverse(path.begin(),path.end());
            for(int i=0; i<path.size(); i++)
            {
                cout<<path[i]<<endl;
            }
        }
        else if(!good)
        {
            cout<<"IMPOSSIBLE\n";
        }
    }
}
